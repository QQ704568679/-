Open source PHP message feedback management system 2.0 BUG

Vulnerability Description:
The source code has a stored XSS vulnerability

The causes of the loopholes are:
This vulnerability can be executed by entering a malicious code at the location of the input box

The process of causing a flaw:
The vulnerability can be executed in the add_book.php page under the root directory
This vulnerability can be triggered by viewing a message in the backstage of the administrator

Location of a vulnerability in source code：
$byz=$_POST['b_yzcode'];
if($byz!==md5($yzcode)){
	ok_info(0,'Wrong parameters!');
}
$siteinfo = array(
		'type_id' => intval(trim($_POST['type_id'])),
		'b_title' => injCheck($_POST['b_title']),
		'b_content' => injCheck($_POST['b_content']),
		'b_name' => injCheck($_POST['b_name']),
		'dh' => injCheck($_POST['dh']),
		'b_tel' => injCheck($_POST['b_tel']),
		'b_mail' => injCheck($_POST['b_mail']),
		'b_qq' => injCheck($_POST['b_qq']),
		'b_ip' => injCheck($_POST['b_ip']),
		'c_date' => time()
		);
$db->insert("book", $siteinfo);
$db->close();
ok_info('/index.php','Congratulations, the message is submitted successfully!');
?>

Lines 24, 26, 28, 29, and 30 in the source code
That's what you see now.：
Lines 20, 22, 24, 25, and 26 in the source code
Problems generated by code

Harm caused：
Attackers can insert malicious code into the web page, causing users or administrators to trigger the vulnerability, which can lead to cookie leakage of administrators or users, which can seriously lead to server fall.

The environment that triggers the vulnerability：
A malicious user only needs to insert a malicious code at the message board to trigger the vulnerability

Edition：
Open source PHP message feedback management system 2.0

POC：
http://192.168.2.230/add_book.php

payload：
<body onload="alert('1')"></body>

Repair recommendations:
Repair source code avoidance vulnerabilities are produced again


